* Simple Echo Server
#+BEGIN_SRC sh
cd HttpServer
erl
c(simple_echo_server).
simple_echo_server:start(8000).

telnet 127.0.0.1 8000
foo

telnet 127.0.0.1 8000
bar

#+END_SRC

* JSON
** mochijson
#+BEGIN_SRC sh
cd JSON
erl
c(mochijson).
c(demo_json).
demo_json:run().
#+END_SRC

* BNR courses web services (for iPhone Application)
#+BEGIN_SRC sh
cd ~/Erlang/BNRCourses
erl
c(bnr_web_courses_server).
c(mochijson).
mochijson:decode(bnr_web_courses_server:raw_bnr_json_data()).
spawn(fun() -> bnr_web_courses_server:start(8080) end).
#+END_SRC

* Ranch
#+BEGIN_SRC sh
cd ~/Erlang/Ranch
cp ${Ranch}/ranch-1.0.0/src/*.erl .
cp ${Ranch}/ranch-1.0.0/examples/tcp_echo/src/*.erl .
erlc ranch_transport.erl
erlc ranch_protocol.erl
erlc -pa . *.erl

erl -sname jia@localhost
application:start(ranch).
application:start(tcp_echo).

telnet localhost 5555
some message
Hello, Erlang.
#+END_SRC

* Cowboy REST
ranch-1.0.0
cowlib-1.3.0
cowboy-master-201505-16
rest_hello_world from cowboy/examples

#+BEGIN_SRC sh
cd ~/Erlang/Cowboy/cowlib
erlc -oebin -Iinclude src/*.erl

cd ~/Erlang/Cowboy/ranch
erlc -oebin src/ranch_transport.erl
erlc -oebin -pa ebin src/*.erl

cd ~/Erlang/Cowboy/cowboy
erlc -oebin -I.. -pa ebin src/cowboy_middleware.erl
erlc -oebin -I.. -pa ebin src/cowboy_sub_protocol.erl
erlc -oebin -I.. -pa ebin src/*.erl

cd ~/Erlang/Cowboy/rest_hello_world
erlc -oebin src/*.erl

## Start rest_hello_world manually
cd ~/Erlang/Cowboy
erl -sname jia@local -pa */ebin
application:start(crypto).
application:start(cowlib).
application:start(ranch).
application:start(cowboy).
application:start(rest_hello_world).

## Test with curl
curl -i http://localhost:8080
curl -i -H "Accept: application/json" http://localhost:8080
curl -i -H "Accept: text/plain" http://localhost:8080
#+END_SRC
* Sudoku
** simple run
#+BEGIN_SRC sh
erl
c(sudoku).
sudoku:benchmarks().
sudoku:par_benchmarks().
#+END_SRC

** more details
Understand internals
#+BEGIN_SRC sh
f(X), X = [ [1] ].
sudoku:fill(X).

f(X), X = [ [0] ].
sudoku:fill(X).

{ok,Puzzles} = file:consult("problems.txt").

## Easy problem can be solved by refine/1
Wildcat = proplists:get_value(wildcat, Puzzles).
sudoku:refine(sudoku:fill(Wildcat)).

## Hard one can't be solved by only refine/1
Diabolical = proplists:get_value(diabolical, Puzzles).
sudoku:refine(sudoku:fill(Diabolical)).

#+END_SRC

** Parallel implementation
Parallel Sudoku
#+BEGIN_SRC sh
erl
c(par_sudoku).
c(pmap_controller).
par_sudoku:benchmarks().
percept:profile("par_sudoku.dat", {par_sudoku, benchmarks, []}, [procs]).
percept:analyze("par_sudoku.dat").

#+END_SRC

** pmap_controller
pmap_controller for granularity
#+BEGIN_SRC sh
c(pmap_controller).
pmap_controller:start().
pmap_controller:get_depth().
pmap_controller:increase_depth().
pmap_controller:get_depth().
pmap_controller:decrease_depth().
pmap_controller:get_depth().

pmap_controller:increase_depth().
pmap_controller:reset_depth().
pmap_controller:get_depth().
pmap_controller:stop().
#+END_SRC

** pmap_controller2
#+BEGIN_SRC sh
c(pmap_controller2).
pmap_controller2:start().
pmap_controller2:get_depth().

## +1
pmap_controller2:increase_depth().
pmap_controller2:get_depth().

## -1
pmap_controller2:increase_depth().
pmap_controller2:get_depth().
pmap_controller2:decrease_depth().
pmap_controller2:get_depth().

## reset
pmap_controller2:reset_depth().
pmap_controller2:get_depth().

## stop
pmap_controller2:stop().
#+END_SRC

* percept
#+BEGIN_SRC sh
## Use Sudoku as an example
l(percept).

## Run benchmark job and generate dat file
percept:profile("sudoku_run.dat", {sudoku, par_benchmarks, []}, [procs]).

## Analyse dat file
percept:analyze("sudoku_run.dat").

## Start web server
percept:start_webserver(8080).
#+END_SRC
* dot graph for todo-app
** dot command
#+BEGIN_SRC sh
dot -Tpng sample_events.dot -o sample.png
#+END_SRC

** Report for number of transitions
ModelJUnit -> events.log (sample_events) -> dot file (sample_events.dot) -> PNG
#+BEGIN_SRC sh
## Sample Events in sample_events
cd ~/Erlang/DotTodo
cp sample/sample_events .
erl
c(dot).
dot:run("sample_events").
q().
open sample_events.png
rm sample_events* *~
#+END_SRC

dot -Tpng events.log.dot -o 123.png

* MapReduce
** counting words example
#+BEGIN_SRC sh
cd ~/Erlang/MapReduce
erl
c(map_reduce).
c(counting_words).
counting_words:run_demo().
#+END_SRC
** Web Crawler
*** Local Test Web Pages
#+BEGIN_SRC sh
cd ~/Erlang/MapReduce/web
sudo python -m SimpleHTTPServer 80
#+END_SRC

*** web crawler
#+BEGIN_SRC sh
cd ~/Erlang/MapReduce/lab
erl
erlc *.erl
c(map_reduce).
c(web_crawler).
inets:start().
httpc:request("http://www.google.com").
f(URL), URL = "http://localhost".
httpc:request(URL).
web_crawler:crawl("http://localhost", 1).
web_crawler:crawl("http://localhost", 2).
f(Pages), Pages = web_crawler:crawl("http://localhost", 3).
f(Pages), Pages = web_crawler:crawl("http://localhost", 4).
[Url || {Url, Body} <- Pages].
web_crawler:relative_to_absolute("http://localhost", "\"foo.html").
f(Html), Html = web_crawler:fetch_url("http://localhost").
web_crawler:find_urls("http://localhost", Html).
f(Pages), Pages = web_crawler:crawl("http://www.chalmers.se", 3).
c(url_filters).
c(web_crawler).
spawn(fun() -> web_crawler:crawl("http://www.chalmers.se", 3) end).

#+END_SRC
* QuickCheck
#+BEGIN_SRC sh
cd ~/Erlang/QuickCheck
erl -pa eqcmini/eqc-1.0.1/ebin
c(demo).
eqc:quickcheck(demo:prop_sum()).
#+END_SRC
* TCP/IP
** Flow
libpcap -> pcap_server -> arp_server
                       -> ip_server
** libpcap
#+BEGIN_SRC sh
## install library
mkdir -p /tmp/23j238
cd /tmp/23j238
wget http://www.tcpdump.org/release/libpcap-1.7.3.tar.gz
tar xvfz libpcap-1.7.3.tar.gz
cd libpcap-1.7.3
./configure
make
sudo make install

## give permisstion to /dev/bpf*
sudo chown jia.wang /dev/bpf*
#+END_SRC

** debug libpcap
simply print out each packet
#+BEGIN_SRC sh
cd ~/Erlang/TCPIP/
gcc -o priv/sniff c_src/sniff.c -lpcap -lpthread
erlc -DDEBUG_LIBPCAP -Iinclude -o ebin src/*.erl
erl -pa ebin
pcap_server:start("en0").
#+END_SRC

** debug Ethernet
simply print out each ethernet packet
#+BEGIN_SRC sh
cd ~/Erlang/TCPIP/
gcc -o priv/sniff c_src/sniff.c -lpcap -lpthread
erlc -DDEBUG_ETHERNET -Iinclude -o ebin src/*.erl
erl -pa ebin
pcap_server:start("en0").
eth_server:start_link([]).
#+END_SRC

** debug ARP
check arp cache
#+BEGIN_SRC sh
arp -a
#+END_SRC
run Erlang code
To find Mac address for a given IP address, we start request in a middle man
process, it could be terminated by any time ARP receives a known IP/Mac pair.
#+BEGIN_SRC sh
cd ~/Erlang/TCPIP/
gcc -o priv/sniff c_src/sniff.c -lpcap -lpthread
erlc -DDEBUG_ARP -Iinclude -o ebin src/*.erl
erl -pa ebin
MyVirtualIpAddress = addr_util:ip_list_to_integer("192.168.1.188").
pcap_server:start("en0").
eth_server:start_link([]).
arp_server:start_link([{ip_address, MyVirtualIpAddress}]).

simple_cache:get(arp_cache, "192.168.1.1").
arp_server:find_mac_address_by_ip("192.168.1.1").
#+END_SRC
* OTP
** Simple gen_server
#+BEGIN_SRC sh
cd ~/Erlang/Demo
erl
c(plus_server).
plus_server:start(88).
plus_server:plus(1, 2).
plus_server:plus_cast(1, 2).
plus_server:plus_info(1, 2).
#+END_SRC

** Simple Application
#+BEGIN_SRC sh
cd ~/Erlang/SimpleApp
erlc -o ebin src/*.erl
erl -pa ebin
application:start(my_plus).
plus_server:plus(3, 5).
plus_server:plus_cast(3, 5).
#+END_SRC

* Deploy OTP Application
** demo_tcp
#+BEGIN_SRC sh
cd ~/Erlang/demo
erl
c(demo_tcp).
demo_tcp:start(6789).
telnet 127.0.0.1  6789
telnet 127.0.0.1  6789
ABC
888
#+END_SRC

** SimpleTimeServer
#+BEGIN_SRC sh
cd ~/Erlang/TimeServer
erlc -o ebin src/*.erl
erl -pa ebin
application:start(time_server).
curl 127.0.0.1:8080
application:stop(time_server).

#+END_SRC
** Release in Mac
#+BEGIN_SRC sh
## Generate release boot/script file
cd ~/Erlang/TimeServer
make clean
erlc -o ebin src/*.erl
cp priv/install_mac_r17 .
cp priv/time_server_mac_r17.rel .

erl -pa ebin
systools:make_script("time_server_mac_r17", [local]).
q().

## Start release with boot/script file
erl -sname timeserver -boot ./time_server_mac_r17
erl -sname timeserver -boot ./time_server_mac_r17 -detached
#+END_SRC

** Package in Mac
#+BEGIN_SRC sh
## Create a package
cd ~/Erlang/TimeServer
make clean
rm -f *.tar.gz
cp priv/install_mac_r17 .
cp priv/time_server_mac_r17.rel .
erlc -o ebin src/*.erl
erl -pa ebin
systools:make_script("time_server_mac_r17", []).
systools:make_tar("time_server_mac_r17", [{erts, code:root_dir()}]).
q().
ls -lh *.tar*

## Script to install and run package
mkdir tmp
cp time_server_mac_r17.tar.gz tmp/
cd tmp
tar xvf time_server_mac_r17.tar.gz
cp ../install_mac_r17 .
chmod +x install_mac_r17
chmod +w erts-6.1/bin/erl
./install_mac_r17
./erts-6.1/bin/erl -sname timeserver -boot ./releases/2.0.0/start
./erts-6.1/bin/erl -sname timeserver -boot ./releases/2.0.0/start -detached
killall beam.smp
#+END_SRC

** Package in Ubuntu 14.04
generate package in local Ubuntu 14.04 VM and deploy to AWS
#+BEGIN_SRC sh
## copy code to Share folder
rm -rf ~/Share/TimeServer
cp -r ~/Erlang/TimeServer ~/Share

## package in Ubuntu VM
cd ~/Super/VMs/PostgreSQL
vagrant up
vagrant ssh
rm -rf TimeServer
mv ~/Share/TimeServer .
cd ~/TimeServer
make clean
cp priv/time_server_ubuntu_1404_r16b03.rel .
erlc -o ebin src/*.erl
erl -pa ebin
systools:make_script("time_server_ubuntu_1404_r16b03", []).
systools:make_tar("time_server_ubuntu_1404_r16b03", [{erts, code:root_dir()}]).
q().
ls -lh *.tar*
mv time_server_ubuntu_1404_r16b03.tar.gz ~/Share

## Upload package to AWS
scp -i ${AWS_FILE} ~/Share/time_server_ubuntu_1404_r16b03.tar.gz ${AWS_HOST}:/home/ubuntu

## fix install On AWS
ssh -i ${AWS_FILE} ${AWS_HOST}
rm -rf time_server
mkdir time_server
cp time_server_ubuntu_1404_r16b03.tar.gz time_server
cd time_server

tar xfv time_server_ubuntu_1404_r16b03.tar.gz
## change ROOTDIR in 'erts-5.10.4/bin/erl' to '/home/ubuntu/time_server'
emacs erts-5.10.4/bin/erl
./erts-5.10.4/bin/erl -sname timeserver -boot ./releases/2.0.0/start
./erts-5.10.4/bin/erl -sname timeserver -boot ./releases/2.0.0/start -detached
killall beam

#+END_SRC
* Edoc
#+BEGIN_SRC sh
cd ~/Erlang/SimpleApp
erlc -o ebin src/*.erl
erl -pa ebin
edoc:application(my_plus, ".", []).
#+END_SRC
* Monitor Tool - observer (replaced appmon/pman)
observer:start().
#+BEGIN_QUOTE
appmon, pman, toolbar, tv all these gs based applications removed and replaced by observer.
#+END_QUOTE

* PostgreSQL client
#+begin_src sh
## build PostgreSQL Erlang Client
cd ~/Erlang/PostgreSQL
git clone https://github.com/wg/epgsql.git
cd epgsql
make
cd ..
#+end_src

verify library

#+begin_src sh
erl -pa epgsql/ebin
%% Connect to a non-exisintg DB
pgsql:connect("127.0.0.1", "wangjia", "", [{database, "non_existing_db"}]).

%% Connect to an existing DB
{ok, Conn} = pgsql:connect("192.168.88.101", "wangjia", "", [{database, "my_db"}]).
q().

cd ~/Erlang/PostgreSQL
erl -pa epgsql/ebin
c(demo_client).
demo_client:default_connection().
f(), C = v(-1), pgsql:close(C).
demo_client:demo_other_host_connection().
f(), C = v(-1), pgsql:close(C).

%% Demo how to use Erlang-PostgreSQL client interact with PostgreSQL
demo_client:demo_simple_connection().
demo_client:demo_get_table_spec().
q().
#+end_src
* Install R17 on Mac
#+BEGIN_SRC sh
cd ~/Downloads
mkdir r17
cd r17
wget http://www.erlang.org/download/otp_src_17.5.tar.gz
tar xfv otp_src_17.5.tar.gz
cd otp_src_17.5
brew install fop
brew install ncurses
CFLAGS=-O0 ./configure --prefix=${HOME}/R17B05 \
                       --enable-darwin-64bit \
                       --with-ssl=/usr/local/Cellar/openssl/1.0.1i
make ; say "finished"
make install

#+END_SRC
* SimpleCache
** version 0.1.0
#+BEGIN_SRC sh
cd ~/Erlang/SimpleCache
erlc -o ebin src/*.erl
erl -pa ebin
application:start(simple_cache).
observer:start().
self().
simple_cache:insert("name", "wang").
simple_cache:insert("age", 100).
simple_cache:insert("city", "Stockholm").
simple_cache:lookup("name").
simple_cache:lookup("no this key").
simple_cache:delete("name").
application:stop(simple_cache).
observer:stop().
init:stop().
#+END_SRC
