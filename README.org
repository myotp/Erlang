* Simple Echo Server
#+BEGIN_SRC sh
cd HttpServer
erl
c(simple_echo_server).
simple_echo_server:start(8000).

telnet 127.0.0.1 8000
foo

telnet 127.0.0.1 8000
bar

#+END_SRC

* JSON
** mochijson
#+BEGIN_SRC sh
cd JSON
erl
c(mochijson).
c(demo_json).
demo_json:run().
#+END_SRC

* BNR courses web services (for iPhone Application)
#+BEGIN_SRC sh
cd ~/Erlang/BNRCourses
erl
c(bnr_web_courses_server).
c(mochijson).
mochijson:decode(bnr_web_courses_server:raw_bnr_json_data()).
spawn(fun() -> bnr_web_courses_server:start(8080) end).
#+END_SRC

* Ranch
#+BEGIN_SRC sh
cd ~/Erlang/Ranch
cp ${Ranch}/ranch-1.0.0/src/*.erl .
cp ${Ranch}/ranch-1.0.0/examples/tcp_echo/src/*.erl .
erlc ranch_transport.erl
erlc ranch_protocol.erl
erlc -pa . *.erl

erl -sname jia@localhost
application:start(ranch).
application:start(tcp_echo).

telnet localhost 5555
some message
Hello, Erlang.
#+END_SRC

* Cowboy REST
ranch-1.0.0
cowlib-1.3.0
cowboy-master-201505-16
rest_hello_world from cowboy/examples

#+BEGIN_SRC sh
cd ~/Erlang/Cowboy/cowlib
erlc -oebin -Iinclude src/*.erl

cd ~/Erlang/Cowboy/ranch
erlc -oebin src/ranch_transport.erl
erlc -oebin -pa ebin src/*.erl

cd ~/Erlang/Cowboy/cowboy
erlc -oebin -I.. -pa ebin src/cowboy_middleware.erl
erlc -oebin -I.. -pa ebin src/cowboy_sub_protocol.erl
erlc -oebin -I.. -pa ebin src/*.erl

cd ~/Erlang/Cowboy/rest_hello_world
erlc -oebin src/*.erl

## Start rest_hello_world manually
cd ~/Erlang/Cowboy
erl -sname jia@local -pa */ebin
application:start(crypto).
application:start(cowlib).
application:start(ranch).
application:start(cowboy).
application:start(rest_hello_world).

## Test with curl
curl -i http://localhost:8080
curl -i -H "Accept: application/json" http://localhost:8080
curl -i -H "Accept: text/plain" http://localhost:8080
#+END_SRC
* Sudoku
** simple run
#+BEGIN_SRC sh
erl
c(sudoku).
sudoku:benchmarks().
sudoku:par_benchmarks().
#+END_SRC

** more details
Understand internals
#+BEGIN_SRC sh
f(X), X = [ [1] ].
sudoku:fill(X).

f(X), X = [ [0] ].
sudoku:fill(X).

{ok,Puzzles} = file:consult("problems.txt").

## Easy problem can be solved by refine/1
Wildcat = proplists:get_value(wildcat, Puzzles).
sudoku:refine(sudoku:fill(Wildcat)).

## Hard one can't be solved by only refine/1
Diabolical = proplists:get_value(diabolical, Puzzles).
sudoku:refine(sudoku:fill(Diabolical)).

#+END_SRC

** Parallel implementation
Parallel Sudoku
#+BEGIN_SRC sh
erl
c(par_sudoku).
c(pmap_controller).
par_sudoku:benchmarks().
percept:profile("par_sudoku.dat", {par_sudoku, benchmarks, []}, [procs]).
percept:analyze("par_sudoku.dat").

#+END_SRC

** pmap_controller
pmap_controller for granularity
#+BEGIN_SRC sh
c(pmap_controller).
pmap_controller:start().
pmap_controller:get_depth().
pmap_controller:increase_depth().
pmap_controller:get_depth().
pmap_controller:decrease_depth().
pmap_controller:get_depth().

pmap_controller:increase_depth().
pmap_controller:reset_depth().
pmap_controller:get_depth().
pmap_controller:stop().
#+END_SRC

** pmap_controller2
#+BEGIN_SRC sh
c(pmap_controller2).
pmap_controller2:start().
pmap_controller2:get_depth().

## +1
pmap_controller2:increase_depth().
pmap_controller2:get_depth().

## -1
pmap_controller2:increase_depth().
pmap_controller2:get_depth().
pmap_controller2:decrease_depth().
pmap_controller2:get_depth().

## reset
pmap_controller2:reset_depth().
pmap_controller2:get_depth().

## stop
pmap_controller2:stop().
#+END_SRC

* percept
#+BEGIN_SRC sh
## Use Sudoku as an example
l(percept).

## Run benchmark job and generate dat file
percept:profile("sudoku_run.dat", {sudoku, par_benchmarks, []}, [procs]).

## Analyse dat file
percept:analyze("sudoku_run.dat").

## Start web server
percept:start_webserver(8080).
#+END_SRC
* dot graph for todo-app
** dot command
#+BEGIN_SRC sh
dot -Tpng sample_events.dot -o sample.png
#+END_SRC

** Report for number of transitions
ModelJUnit -> events.log (sample_events) -> dot file (sample_events.dot) -> PNG
#+BEGIN_SRC sh
## Sample Events in sample_events
cd ~/Erlang/DotTodo
cp sample/sample_events .
erl
c(dot).
dot:run("sample_events").
open sample_events.png

#+END_SRC
